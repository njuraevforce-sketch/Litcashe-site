;(function () {
  if (window.__LC_SINGLETON__) {
    try { console.warn('[LC] main app already initialized:', window.__LC_SINGLETON__); } catch(_){}
    return;
  }
  window.__LC_SINGLETON__ = 'app_supabase@2025-09-20';

  // –ö–æ–Ω—Ñ–∏–≥ + –∫–ª–∏–µ–Ω—Ç
  if (!window.SUPABASE_URL || !window.SUPABASE_ANON_KEY) {
    console.error('[LC] Supabase config missing.');
    return;
  }
  if (!window.supabase || !window.supabase.createClient) {
    console.warn('[LC] supabase-js not found. Include @supabase/supabase-js v2');
    return;
  }
  const sb = window.sb || window.supabase.createClient(
    window.SUPABASE_URL,
    window.SUPABASE_ANON_KEY,
    { auth: { persistSession: true, autoRefreshToken: true, detectSessionInUrl: true } }
  );
  window.sb = sb; window.supabaseClient = sb;

  // ===== –£–¢–ò–õ–ò–¢–´ =============================================================
  const $ = (sel) => document.querySelector(sel);
  const $$ = (sel) => document.querySelectorAll(sel);
  const fmtMoney = (v) => `$${Number(v || 0).toFixed(2)}`;
  const fmtDate = (iso) => { try { return new Date(iso).toLocaleString(); } catch { return iso || ''; } };
  const pickNum = (v, d=0) => { const n = Number(v); return Number.isFinite(n) ? n : d; };

  async function getUser() {
    const { data, error } = await sb.auth.getUser();
    if (error) throw error;
    return data?.user || null;
  }

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
  const LC = window.LC = window.LC || {};

  // ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ =====
  LC.config = {
    MIN_ACTIVE_BALANCE: 2900, // 29 USDT –≤ —Ü–µ–Ω—Ç–∞—Ö
    DAILY_VIEWS_LIMIT: 5,
    MIN_VIEW_SECONDS: 10,
    LEVELS: [
      { name: 'Starter', min_balance: 2900, min_refs: 0, percent: 2.5, cap: 30000 },
      { name: 'Advanced', min_balance: 30000, min_refs: 5, percent: 3.0, cap: 100000 },
      { name: 'Pro Elite', min_balance: 100000, min_refs: 10, percent: 4.0, cap: 300000 },
      { name: 'Titanium', min_balance: 300000, min_refs: 30, percent: 5.0, cap: 1000000 }
    ],
    REFERRAL_PERCENTS: [13, 5, 1] // 1st, 2nd, 3rd generation
  };

  // ===== –ë–ê–õ–ê–ù–° –ò –ê–ö–¢–ò–í–ù–û–°–¢–¨ ================================================
  LC.refreshBalance = async function() {
    try {
      const user = await getUser(); 
      if (!user) return;
      
      const { data, error } = await sb.from('wallets').select('balance_cents').eq('user_id', user.id).maybeSingle();
      if (error) return;
      
      if (data && typeof data.balance_cents === 'number') {
        const el = $('[data-balance]');
        if (el) {
          const formatted = (data.balance_cents / 100).toLocaleString('ru-RU', {
            minimumFractionDigits: 0, maximumFractionDigits: 2
          });
          el.textContent = formatted;
        }
      }
    } catch(e) { console.warn('[LC] refreshBalance', e?.message||e); }
  };

  LC.isActiveUser = async function() {
    try {
      const user = await getUser();
      if (!user) return false;
      
      const { data, error } = await sb.from('wallets').select('balance_cents').eq('user_id', user.id).maybeSingle();
      if (error || !data) return false;
      
      return data.balance_cents >= LC.config.MIN_ACTIVE_BALANCE;
    } catch(e) {
      console.warn('[LC] isActiveUser', e?.message||e);
      return false;
    }
  };

  // ===== –°–ò–°–¢–ï–ú–ê –£–†–û–í–ù–ï–ô ===================================================
  LC.getLevelInfo = async function() {
    try {
      const user = await getUser();
      if (!user) return null;

      let levelInfo = null;
      
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: get_level_info (–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
      try {
        const { data, error } = await sb.rpc('get_level_info');
        if (!error && data) {
          levelInfo = Array.isArray(data) ? data[0] : data;
          console.log('‚úÖ Level info from get_level_info:', levelInfo);
        }
      } catch (e1) {
        console.warn('get_level_info failed:', e1);
      }

      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: get_level_info_v2 (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è)
      if (!levelInfo) {
        try {
          const { data, error } = await sb.rpc('get_level_info_v2');
          if (!error && data) {
            levelInfo = Array.isArray(data) ? data[0] : data;
            console.log('‚úÖ Level info from get_level_info_v2:', levelInfo);
          }
        } catch (e2) {
          console.warn('get_level_info_v2 failed:', e2);
        }
      }

      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: compute_level (–∞–≤–∞—Ä–∏–π–Ω–∞—è)
      if (!levelInfo) {
        try {
          const { data, error } = await sb.rpc('compute_level', { _uid: user.id });
          if (!error && data) {
            levelInfo = Array.isArray(data) ? data[0] : data;
            console.log('‚úÖ Level info from compute_level:', levelInfo);
          }
        } catch (e3) {
          console.warn('compute_level failed:', e3);
        }
      }

      return levelInfo;
    } catch(e) {
      console.error('[LC] getLevelInfo', e);
      return null;
    }
  };

  LC.refreshLevelInfo = async function() {
    try {
      const info = await LC.getLevelInfo(); 
      if (!info) return;
      
      console.log('Refreshing level info:', info);
      
      const set = (sel, val) => { 
        const el = $(sel); 
        if (el) el.textContent = String(val); 
      };

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —Ä–∞–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
      const perView = pickNum(info.reward_per_view_cents || info.per_view_reward_cents)/100;
      const daily = pickNum(info.daily_reward_cents)/100;
      const base = pickNum(info.base_amount_cents || info.base_cents || info.capital_cap_cents)/100;
      const rate = pickNum(info.level_percent || info.rate_percent || (info.rate_bp ? info.rate_bp/100 : 0));
      const levelName = info.level_name || 'Starter';
      const viewsLeft = info.views_left_today ?? 0;
      const totalRefs = info.total_referrals || info.refs_total || 0;

      set('[data-level-name]', levelName);
      set('[data-views-left]', viewsLeft);
      set('[data-reward-per-view]', `${perView.toFixed(2)} USDT`);
      set('[data-daily-reward]', `${daily.toFixed(2)} USDT`);
      set('[data-level-base]', `$${base.toFixed(2)}`);
      set('[data-level-percent]', `${rate.toFixed(2)}%`);

      const badge = $('#perViewBadge'); 
      if (badge) badge.textContent = `+${perView.toFixed(2)} USDT –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä`;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–Ω–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞—Ä—É—Å–µ–ª–∏)
      const levelEl = $('[data-level]');
      if (levelEl && !levelEl.closest('.level-card-carousel')) {
        levelEl.textContent = levelName;
      }
      
      const rateEl = $('[data-rate]');
      if (rateEl && !rateEl.closest('.level-card-carousel')) {
        rateEl.textContent = `${rate.toFixed(2)}%`;
      }
      
      const capEl = $('[data-cap]');
      if (capEl && !capEl.closest('.level-card-carousel')) {
        capEl.textContent = `$${base.toFixed(2)}`;
      }
      
      const refsEl = $('[data-refs]');
      if (refsEl && !refsEl.closest('.level-card-carousel')) {
        refsEl.textContent = totalRefs;
      }

      const baseCapEl = $('#baseCapCell');
      if (baseCapEl) baseCapEl.textContent = `$${base.toFixed(2)}`;

      // –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
      const nextTargetEl = $('#nextTargetCell');
      if (nextTargetEl) {
        if (info.next_level_goal) {
          nextTargetEl.textContent = info.next_level_goal;
        } else {
          nextTargetEl.textContent = '‚Äî';
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–Ω–Ω–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (window.updateCurrentLevelBanner) {
        window.updateCurrentLevelBanner(info);
      }

      console.log('üîÑ Level info updated successfully');

    } catch(e) { 
      console.error('[LC] refreshLevelInfo error:', e); 
    }
  };

  // ===== –ù–ê–ß–ò–°–õ–ï–ù–ò–ï –ó–ê –ü–†–û–°–ú–û–¢–† =============================================
  LC.creditView = async function(videoId, watchedSeconds) {
    const user = await getUser(); 
    if (!user) { 
      alert(window.LC_I18N ? window.LC_I18N.t('notification_login_required') : '‚ùå –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç'); 
      return null; 
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const isActive = await LC.isActiveUser();
    if (!isActive) {
      alert(window.LC_I18N ? window.LC_I18N.t('notification_insufficient_balance') : '‚ùå –î–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–∏–Ω–∏–º—É–º –Ω–∞ $29');
      return null;
    }

    console.log('Calling credit_view_v3 with:', { videoId, watchedSeconds, userId: user.id });

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏ –ª–∏–º–∏—Ç—ã
      const levelInfo = await LC.getLevelInfo();
      console.log('Current level info before credit:', levelInfo);
      
      if (levelInfo && levelInfo.views_left_today <= 0) {
        alert(window.LC_I18N ? window.LC_I18N.t('notification_view_limit_reached') : '‚ùå –õ–∏–º–∏—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω');
        return null;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º credit_view_v3 —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const { data, error } = await sb.rpc('credit_view_v3', {
        p_user_id: user.id,
        p_video_id: String(videoId || 'video'),
        p_watched_seconds: Math.max(0, Math.floor(watchedSeconds || 0)),
      });
      
      if (error) { 
        console.error('Credit view error:', error); 
        
        // Fallback: –ø—Ä–æ–±—É–µ–º award_view_v2
        console.log('Trying award_view_v2 as fallback...');
        const { data: fallbackData, error: fallbackError } = await sb.rpc('award_view_v2', {
          p_video_id: String(videoId || 'video'),
          p_watched_seconds: Math.max(0, Math.floor(watchedSeconds || 0)),
        });
        
        if (fallbackError) {
          alert(window.LC_I18N ? window.LC_I18N.t('notification_award_error') : '‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è'); 
          return null;
        }
        
        console.log('Fallback award_view_v2 response:', fallbackData);
        data = fallbackData;
      }
      
      console.log('Credit view response:', data);
      
      const row = Array.isArray(data) ? data[0] : data;
      if (!row?.ok) { 
        alert(row?.message || (window.LC_I18N ? window.LC_I18N.t('notification_award_error') : '‚ùå –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ')); 
        return null; 
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      if (typeof row.views_left === 'number') {
        const el = document.querySelector('[data-views-left]');
        if (el) el.textContent = String(row.views_left);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      await LC.refreshBalance();
      await LC.refreshLevelInfo();
      await LC.loadReferralEarnings();
      await LC.refreshDashboardCards();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏
      if (row.reward_per_view_cents || row.reward_cents) {
        const rewardCents = row.reward_per_view_cents || row.reward_cents;
        const reward = (rewardCents / 100).toFixed(2);
        alert(window.LC_I18N ? window.LC_I18N.t('notification_award_success', { amount: reward }) : `‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ $${reward} –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä!`);
      }
      
      return row;
    } catch (error) {
      console.error('Exception in creditView:', error);
      alert((window.LC_I18N ? window.LC_I18N.t('notification_award_error') : '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏') + ': ' + error.message);
      return null;
    }
  };

  // ===== –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê ===============================================
  LC.ensureProfile = async function() {
    try {
      const user = await getUser(); 
      if (!user) return;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
      const { data: existingProfile } = await sb
        .from('profiles')
        .select('user_id, ref_code')
        .eq('user_id', user.id)
        .maybeSingle();

      if (existingProfile) return;

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
      const refCode = 'LC' + Math.random().toString(36).substr(2, 8).toUpperCase();
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
      const { error } = await sb
        .from('profiles')
        .insert({ 
          user_id: user.id, 
          ref_code: refCode,
          created_at: new Date().toISOString()
        });

      if (error && error.code !== '23505') {
        console.warn('[LC] ensureProfile insert error', error);
      }
    } catch(e) { 
      console.warn('[LC] ensureProfile', e?.message||e); 
    }
  };

  LC.applyReferral = async function() {
    try {
      const params = new URLSearchParams(location.search);
      const refParam = params.get('ref') || localStorage.getItem('lc_ref_code');
      if (!refParam) return;

      const user = await getUser();
      if (!user) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        localStorage.setItem('lc_ref_code', refParam);
        return;
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
      const { data, error } = await sb.rpc('apply_referral_code', { 
        p_ref_code: refParam 
      });

      if (error) {
        console.warn('apply_referral_code failed, trying manual:', error);
        
        // Fallback: manual_apply_referral
        const { data: manualData, error: manualError } = await sb.rpc('manual_apply_referral', {
          p_user_id: user.id,
          p_ref_code: refParam
        });
        
        if (manualError) {
          console.warn('Manual referral application also failed:', manualError);
          return;
        }
      }

      // –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ
      localStorage.removeItem('lc_ref_code');
      console.log('‚úÖ Referral code applied successfully');
      
    } catch(e) {
      console.warn('[LC] applyReferral', e?.message||e);
    }
  };

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–°–´–õ–ö–ê –†–ê–ë–û–¢–ê–ï–¢
  LC.mountReferral = async function() {
    try {
      const wrap = document.querySelector('#refLinkWrap');
      const input = document.querySelector('#refLink');
      
      console.log('mountReferral started', { wrap, input });

      const user = await getUser();
      if (!user) {
        console.log('No user found');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: profile, error } = await sb
        .from('profiles')
        .select('ref_code')
        .eq('user_id', user.id)
        .maybeSingle();

      if (error) {
        console.error('Profile error:', error);
        return;
      }

      if (!profile?.ref_code) {
        console.log('No ref code found');
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
      const url = new URL(location.origin + '/register_single.html');
      url.searchParams.set('ref', profile.ref_code);
      
      if (input) {
        input.value = url.toString();
        console.log('Ref link set:', input.value);
      }
      
      if (wrap) {
        wrap.style.display = 'block';
        console.log('Ref panel displayed');
      }

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
      const btn = document.querySelector('#btnCopyRef');
      if (btn) {
        btn.addEventListener('click', async () => {
          try {
            await navigator.clipboard.writeText(input.value);
            btn.textContent = window.LC_I18N ? window.LC_I18N.t('notification_copied') : '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
            setTimeout(() => btn.textContent = 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å', 2000);
          } catch (err) {
            input.select();
            document.execCommand('copy');
            btn.textContent = window.LC_I18N ? window.LC_I18N.t('notification_copied') : '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
            setTimeout(() => btn.textContent = 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å', 2000);
          }
        });
      }
      
      console.log('mountReferral completed successfully');
    } catch(e) { 
      console.error('[LC] mountReferral error', e); 
    }
  };

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  LC.getActiveReferralCounts = async function() {
    try {
      const user = await getUser();
      if (!user) return { gen1: 0, gen2: 0, gen3: 0 };

      let counts = { gen1: 0, gen2: 0, gen3: 0 };
      
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: get_my_ref_counts (–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
      try {
        const { data, error } = await sb.rpc('get_my_ref_counts');
        if (!error && data) {
          const row = Array.isArray(data) ? data[0] : data;
          counts = {
            gen1: Number(row.gen1 || 0),
            gen2: Number(row.gen2 || 0),
            gen3: Number(row.gen3 || 0)
          };
          console.log('‚úÖ Referral counts from get_my_ref_counts:', counts);
        }
      } catch (e1) {
        console.warn('get_my_ref_counts failed:', e1);
      }

      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: count_refs (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è)
      if (counts.gen1 === 0 && counts.gen2 === 0 && counts.gen3 === 0) {
        try {
          const { data, error } = await sb.rpc('count_refs', {
            p_user: user.id
          });
          
          if (!error && data) {
            const row = Array.isArray(data) ? data[0] : data;
            counts = {
              gen1: Number(row.gen1 || 0),
              gen2: Number(row.gen2 || 0),
              gen3: Number(row.gen3 || 0)
            };
            console.log('‚úÖ Referral counts from count_refs:', counts);
          }
        } catch (e2) {
          console.warn('count_refs failed:', e2);
        }
      }

      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ referrals (–∞–≤–∞—Ä–∏–π–Ω—ã–π)
      if (counts.gen1 === 0 && counts.gen2 === 0 && counts.gen3 === 0) {
        try {
          const { data: refs1 } = await sb
            .from('referrals')
            .select('id')
            .eq('referrer_id', user.id)
            .eq('generation', 1);

          const { data: refs2 } = await sb
            .from('referrals')
            .select('id')
            .eq('referrer_id', user.id)
            .eq('generation', 2);

          const { data: refs3 } = await sb
            .from('referrals')
            .select('id')
            .eq('referrer_id', user.id)
            .eq('generation', 3);

          counts = {
            gen1: refs1?.length || 0,
            gen2: refs2?.length || 0,
            gen3: refs3?.length || 0
          };
          console.log('‚úÖ Referral counts from direct query:', counts);
        } catch (e3) {
          console.warn('Direct referrals query failed:', e3);
        }
      }

      return counts;
    } catch(e) {
      console.warn('[LC] getActiveReferralCounts error:', e);
      return { gen1: 0, gen2: 0, gen3: 0 };
    }
  };

  // ===== –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø ===============================================
  LC.loadReferralEarnings = async function() {
    try {
      const user = await getUser(); 
      if (!user) return;

      console.log('üîÑ Loading referral earnings for user:', user.id);

      let gen1Total = 0, gen2Total = 0, gen3Total = 0;
      let dataFound = false;

      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: get_referral_earnings_simple (–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
      try {
        const { data, error } = await sb.rpc('get_referral_earnings_simple');
        
        if (!error && data) {
          console.log('üìä Data from get_referral_earnings_simple:', data);
          
          // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON –æ–±—ä–µ–∫—Ç
          if (data.gen1) gen1Total = Math.round(data.gen1 * 100);
          if (data.gen2) gen2Total = Math.round(data.gen2 * 100);
          if (data.gen3) gen3Total = Math.round(data.gen3 * 100);
          
          dataFound = true;
          console.log('‚úÖ Data from get_referral_earnings_simple processed:', {
            gen1: gen1Total/100,
            gen2: gen2Total/100,
            gen3: gen3Total/100
          });
        }
      } catch (e1) {
        console.warn('get_referral_earnings_simple failed:', e1);
      }

      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: get_referral_earnings (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è)
      if (!dataFound) {
        try {
          const { data, error } = await sb.rpc('get_referral_earnings');
          
          if (!error && data) {
            console.log('üìä Data from get_referral_earnings:', data);
            
            const earnings = Array.isArray(data) ? data : [data];
            
            earnings.forEach(earning => {
              const generation = earning.generation;
              const totalCents = earning.total_cents || 0;
              
              switch(generation) {
                case 1: gen1Total = totalCents; break;
                case 2: gen2Total = totalCents; break;
                case 3: gen3Total = totalCents; break;
              }
            });
            
            dataFound = true;
            console.log('‚úÖ Data from get_referral_earnings processed:', {
              gen1: gen1Total/100,
              gen2: gen2Total/100,
              gen3: gen3Total/100
            });
          }
        } catch (e2) {
          console.warn('get_referral_earnings failed:', e2);
        }
      }

      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: my_ref_income_summary (–∞–≤–∞—Ä–∏–π–Ω–∞—è)
      if (!dataFound) {
        try {
          const { data, error } = await sb.rpc('my_ref_income_summary');
          
          if (!error && data) {
            console.log('üìä Data from my_ref_income_summary:', data);
            
            const row = Array.isArray(data) ? data[0] : data;
            gen1Total = Math.round((row.lvl1_usdt || 0) * 100);
            gen2Total = Math.round((row.lvl2_usdt || 0) * 100);
            gen3Total = Math.round((row.lvl3_usdt || 0) * 100);
            
            dataFound = true;
            console.log('‚úÖ Data from my_ref_income_summary processed:', {
              gen1: gen1Total/100,
              gen2: gen2Total/100,
              gen3: gen3Total/100
            });
          }
        } catch (e3) {
          console.warn('my_ref_income_summary failed:', e3);
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –î–ê–ñ–ï –ï–°–õ–ò –î–ê–ù–ù–´–ï = 0
      const set = (sel, val) => { 
        const el = $(sel); 
        if (el) el.textContent = val; 
      };
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–Ω–µ–ª—å
      set('#gen1Cell', fmtMoney(gen1Total/100));
      set('#gen2Cell', fmtMoney(gen2Total/100));
      set('#gen3Cell', fmtMoney(gen3Total/100));

      const total = (gen1Total + gen2Total + gen3Total) / 100;
      set('#refTotalCell', fmtMoney(total));

      // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      set('#gen1CellModal', fmtMoney(gen1Total/100));
      set('#gen2CellModal', fmtMoney(gen2Total/100));
      set('#gen3CellModal', fmtMoney(gen3Total/100));
      set('#refTotalCellModal', fmtMoney(total));

      console.log('üéØ Final referral earnings:', { 
        gen1: fmtMoney(gen1Total/100), 
        gen2: fmtMoney(gen2Total/100), 
        gen3: fmtMoney(gen3Total/100), 
        total: fmtMoney(total)
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
      this.updateReferralChart(gen1Total, gen2Total, gen3Total);

    } catch(e) { 
      console.error('‚ùå [LC] loadReferralEarnings error:', e); 
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–æ—Ö–æ–¥–æ–≤
  LC.updateReferralChart = function(gen1Cents, gen2Cents, gen3Cents) {
    try {
      const total = gen1Cents + gen2Cents + gen3Cents;
      
      if (total === 0) {
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Ö–æ–¥–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        this.updateChartAppearance(40, 30, 30);
        return;
      }

      const gen1Percent = Math.round((gen1Cents / total) * 100);
      const gen2Percent = Math.round((gen2Cents / total) * 100);
      const gen3Percent = 100 - gen1Percent - gen2Percent;

      this.updateChartAppearance(gen1Percent, gen2Percent, gen3Percent);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã
  LC.updateChartAppearance = function(gen1Percent, gen2Percent, gen3Percent) {
    const chart = document.querySelector('.referral-chart');
    if (chart) {
      chart.style.background = `conic-gradient(
        var(--primary) 0% ${gen1Percent}%,
        var(--primary-light) ${gen1Percent}% ${gen1Percent + gen2Percent}%,
        #e2e8f0 ${gen1Percent + gen2Percent}% 100%
      )`;
    }
    
    const donutChart = document.querySelector('.donut-chart');
    if (donutChart) {
      donutChart.style.background = `conic-gradient(
        var(--primary) 0% ${gen1Percent}%,
        var(--primary-light) ${gen1Percent}% ${gen1Percent + gen2Percent}%,
        #e2e8f0 ${gen1Percent + gen2Percent}% 100%
      )`;
    }
  };

  // ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –î–ê–®–ë–û–†–î–ê ========================================
  LC.refreshDashboardCards = async function() {
    try {
      const user = await getUser(); 
      if (!user) return;

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è–º
      const counts = await LC.getActiveReferralCounts();

      const set = (sel, val) => { const el = $(sel); if (el) el.textContent = String(val); };
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–Ω–µ–ª—å
      set('#gen1Count', counts.gen1);
      set('#gen2Count', counts.gen2);
      set('#gen3Count', counts.gen3);

      // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      set('#gen1CountModal', counts.gen1);
      set('#gen2CountModal', counts.gen2);
      set('#gen3CountModal', counts.gen3);

      console.log('üìä Referral counts updated:', counts);

    } catch(e) { 
      console.error('[LC] refreshDashboardCards error:', e); 
    }
  };

  // ===== –í–ò–î–ï–û –ü–õ–ï–ô–ï–† =======================================================
  const LC_VIDEO_LIST = [
    '/assets/videos/ad1.MP4'
  ];

  LC.initVideoWatch = function () {
    const video    = document.getElementById('promoVid');
    const startBtn = document.getElementById('startBtn');
    const bar      = document.getElementById('progressFill');
    const txt      = document.getElementById('progressText');
    const overlay  = document.getElementById('limitOverlay');
    
    if (!video || !startBtn) return;

    if (video.dataset.lcInit === '1') return;
    video.dataset.lcInit = '1';

    let allowed = false, credited = false, acc = 0, lastT = 0;

    const ui = (m)=> { if (txt) txt.textContent = m; };
    const setBar = (p)=> { if (bar) bar.style.width = Math.max(0, Math.min(100, p)) + '%'; };
    const pickVideo = ()=> LC_VIDEO_LIST[Math.floor(Math.random() * LC_VIDEO_LIST.length)];

    const reset = ()=> {
      allowed = false; credited = false; acc = 0; lastT = 0;
      video.currentTime = 0; video.pause();
      setBar(0); 
      startBtn.disabled = false; 
      startBtn.textContent = window.LC_I18N ? window.LC_I18N.t('dashboard_earn_by_view') : 'üé¨ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä';
      checkVideoAvailability();
    };

    const checkVideoAvailability = async () => {
      try {
        const isActive = await LC.isActiveUser();
        const levelInfo = await LC.getLevelInfo();
        const viewsLeft = levelInfo ? levelInfo.views_left_today : 0;
        
        console.log('Video availability check:', { isActive, viewsLeft, levelInfo });
        
        if (!isActive) {
          ui(window.LC_I18N ? window.LC_I18N.t('notification_insufficient_balance') : '–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –æ—Ç $29 –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞');
          startBtn.disabled = true;
          startBtn.textContent = window.LC_I18N ? window.LC_I18N.t('notification_failed') + ' –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç';
          if (overlay) {
            overlay.style.display = 'flex';
            overlay.textContent = window.LC_I18N ? window.LC_I18N.t('notification_insufficient_balance') : '–î–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –æ—Ç $29';
          }
        } else if (viewsLeft <= 0) {
          ui(window.LC_I18N ? window.LC_I18N.t('notification_view_limit_reached') : '–õ–∏–º–∏—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω');
          startBtn.disabled = true;
          startBtn.textContent = window.LC_I18N ? window.LC_I18N.t('notification_view_limit_reached') : '‚è≥ –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω';
          if (overlay) {
            overlay.style.display = 'flex';
            overlay.textContent = window.LC_I18N ? window.LC_I18N.t('notification_view_limit_reached') : '–õ–∏–º–∏—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω';
          }
        } else {
          ui(window.LC_I18N ? window.LC_I18N.t('progress_views_left', { count: viewsLeft }) : `–ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä¬ª (–æ—Å—Ç–∞–ª–æ—Å—å: ${viewsLeft})`);
          startBtn.disabled = false;
          startBtn.textContent = window.LC_I18N ? window.LC_I18N.t('dashboard_earn_by_view') : 'üé¨ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä';
          if (overlay) overlay.style.display = 'none';
        }
      } catch (error) {
        console.error('Error checking video availability:', error);
      }
    };

    video.addEventListener('timeupdate', ()=> {
      if (!allowed) return;
      const t = video.currentTime, dur = video.duration;
      if (t < 0 || !dur || dur < 1) return;
      const p = Math.max(0, Math.min(100, (t/dur)*100));
      setBar(p);
      if (t > lastT) { acc += (t - lastT); lastT = t; }
      
      // –ù–∞—á–∏—Å–ª—è–µ–º –ø–æ—Å–ª–µ 10 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
      if (acc >= LC.config.MIN_VIEW_SECONDS && !credited) {
        credited = true; 
        console.log('Calling creditView with seconds:', Math.floor(acc));
        LC.creditView(video.src.split('/').pop() || 'video', Math.floor(acc));
      }
      
      if (t >= dur - 0.5) {
        video.pause();
        ui(window.LC_I18N ? window.LC_I18N.t('notification_success') + ' –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ' : '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        setTimeout(reset, 1500);
      }
    });

    video.addEventListener('ended', ()=> {
      if (!allowed) return;
      video.pause();
      ui(window.LC_I18N ? window.LC_I18N.t('notification_success') + ' –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ' : '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      setTimeout(reset, 1500);
    });

    startBtn.addEventListener('click', async (e)=> {
      e.preventDefault();
      if (allowed) return;
      
      const isActive = await LC.isActiveUser();
      const levelInfo = await LC.getLevelInfo();
      const viewsLeft = levelInfo ? levelInfo.views_left_today : 0;
      
      console.log('Start button clicked:', { isActive, viewsLeft });
      
      if (!isActive) {
        alert(window.LC_I18N ? window.LC_I18N.t('notification_insufficient_balance') : '‚ùå –î–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–∏–Ω–∏–º—É–º –Ω–∞ $29');
        return;
      }
      
      if (viewsLeft <= 0) {
        alert(window.LC_I18N ? window.LC_I18N.t('notification_view_limit_reached') : '‚ùå –õ–∏–º–∏—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω');
        return;
      }
      
      video.src = pickVideo(); 
      video.load();
      allowed = true; credited = false; acc = 0; lastT = 0;
      
      try {
        await video.play();
        ui(window.LC_I18N ? window.LC_I18N.t('notification_processing') + ' –°–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –¥–æ –∫–æ–Ω—Ü–∞' : '–°–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –¥–æ –∫–æ–Ω—Ü–∞'); 
        setBar(0);
        startBtn.disabled = true; 
        startBtn.textContent = window.LC_I18N ? window.LC_I18N.t('notification_processing') : '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ...';
        if (overlay) overlay.style.display = 'none';
      } catch (err) {
        console.warn('Autoplay failed:', err);
        alert(window.LC_I18N ? window.LC_I18N.t('notification_autoplay_blocked') : '‚ùå –ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ');
        reset();
      }
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    setTimeout(checkVideoAvailability, 500);
    reset();
  };

  // ===== –°–ò–°–¢–ï–ú–ê –í–´–í–û–î–ê –°–†–ï–î–°–¢–í =====

  LC.requestWithdrawal = async function(amountCents, method = 'TRC20', address = '') {
    try {
      const sb = window.sb || window.supabase;
      if (!sb) {
        alert(window.LC_I18N ? window.LC_I18N.t('notification_network_error') : '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        return null;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: { user }, error: userError } = await sb.auth.getUser();
      if (userError || !user) {
        alert(window.LC_I18N ? window.LC_I18N.t('notification_login_required') : '‚ùå –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç');
        return null;
      }
      
      console.log('üîÑ –ó–∞–ø—Ä–æ—Å –≤—ã–≤–æ–¥–∞:', {
        userId: user.id,
        amountCents,
        method,
        address
      });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º RPC —Ñ—É–Ω–∫—Ü–∏—é
      const { data, error } = await sb.rpc('request_withdrawal', {
        p_amount_cents: parseInt(amountCents),
        p_network: String(method),
        p_address: String(address),
        p_currency: 'USDT'
      });

      if (error) {
        console.error('‚ùå Withdrawal RPC error:', error);
        
        // Fallback: —Å–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞–ø—Ä—è–º—É—é
        console.log('üîÑ –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞–ø—Ä—è–º—É—é...');
        
        const { data: wallet } = await sb
          .from('wallets')
          .select('balance_cents')
          .eq('user_id', user.id)
          .single();
          
        if (!wallet || wallet.balance_cents < amountCents) {
          alert(window.LC_I18N ? window.LC_I18N.t('notification_insufficient_balance') : '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ');
          return null;
        }
        
        const { data: directData, error: directError } = await sb
          .from('withdrawals')
          .insert({
            user_id: user.id,
            amount_cents: amountCents,
            network: method,
            address: address,
            currency: 'USDT',
            status: 'pending',
            fee_cents: 0,
            created_at: new Date().toISOString()
          })
          .select()
          .single();
          
        if (directError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–π –≤—Å—Ç–∞–≤–∫–∏:', directError);
          alert((window.LC_I18N ? window.LC_I18N.t('notification_withdrawal_error') : '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É') + ': ' + directError.message);
          return null;
        }
        
        // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        await sb
          .from('wallets')
          .update({ 
            balance_cents: wallet.balance_cents - amountCents,
            updated_at: new Date().toISOString()
          })
          .eq('user_id', user.id);
        
        console.log('‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é:', directData);
        
        return { 
          ok: true, 
          message: window.LC_I18N ? window.LC_I18N.t('notification_withdrawal_success') : '‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
          id: directData.id 
        };
      }

      console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç RPC —Ñ—É–Ω–∫—Ü–∏–∏:', data);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç RPC —Ñ—É–Ω–∫—Ü–∏–∏
      const result = typeof data === 'object' ? data : JSON.parse(data);
      
      if (!result?.ok) {
        alert('‚ùå ' + (result?.message || (window.LC_I18N ? window.LC_I18N.t('notification_withdrawal_error') : '–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π')));
        return null;
      }
      
      return result;
      
    } catch (error) {
      console.error('‚ùå Withdrawal request error:', error);
      alert((window.LC_I18N ? window.LC_I18N.t('notification_withdrawal_error') : '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏') + ': ' + error.message);
      return null;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∞
  LC.checkWithdrawalEligibility = async function(userId) {
    try {
      const sb = window.sb || window.supabase;
      if (!sb) return { eligible: false, reason: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' };
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: profile, error: profileError } = await sb
        .from('profiles')
        .select('created_at')
        .eq('user_id', userId)
        .single();
      
      if (profileError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è:', profileError);
        return { eligible: false, reason: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è' };
      }
      
      const registrationDate = new Date(profile.created_at);
      const now = new Date();
      const daysSinceRegistration = Math.floor((now - registrationDate) / (1000 * 60 * 60 * 24));
      
      console.log('üìÖ –î–Ω–µ–π —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', daysSinceRegistration);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–æ–≤
      const { data: previousWithdrawals, error: withdrawalsError } = await sb
        .from('withdrawals')
        .select('id, created_at, status')
        .eq('user_id', userId)
        .in('status', ['paid', 'pending'])
        .order('created_at', { ascending: false });
      
      if (withdrawalsError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤:', withdrawalsError);
        return { eligible: false, reason: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤' };
      }
      
      const hasPreviousWithdrawals = previousWithdrawals && previousWithdrawals.length > 0;
      
      // –ü–µ—Ä–≤—ã–π –≤—ã–≤–æ–¥ - –º–∏–Ω–∏–º—É–º 5 –¥–Ω–µ–π –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      if (!hasPreviousWithdrawals && daysSinceRegistration < 5) {
        const daysLeft = 5 - daysSinceRegistration;
        return { 
          eligible: false, 
          reason: `–ü–µ—Ä–≤—ã–π –≤—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ ${daysLeft} ${daysLeft === 1 ? '–¥–µ–Ω—å' : '–¥–Ω—è'} –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏` 
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–≤–æ–¥ (–Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 24 —á–∞—Å–∞)
      if (hasPreviousWithdrawals) {
        const lastWithdrawal = previousWithdrawals[0];
        const lastWithdrawalDate = new Date(lastWithdrawal.created_at);
        const hoursSinceLastWithdrawal = Math.floor((now - lastWithdrawalDate) / (1000 * 60 * 60));
        
        console.log('‚è∞ –ß–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–≤–æ–¥–∞:', hoursSinceLastWithdrawal);
        
        if (hoursSinceLastWithdrawal < 24) {
          const hoursLeft = 24 - hoursSinceLastWithdrawal;
          return { 
            eligible: false, 
            reason: `–°–ª–µ–¥—É—é—â–∏–π –≤—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ ${hoursLeft} ${hoursLeft === 1 ? '—á–∞—Å' : '—á–∞—Å–æ–≤'}` 
          };
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
      const { data: wallet, error: walletError } = await sb
        .from('wallets')
        .select('balance_cents')
        .eq('user_id', userId)
        .single();
        
      if (walletError || !wallet) {
        return { eligible: false, reason: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞' };
      }
      
      if (wallet.balance_cents < 2900) {
        return { eligible: false, reason: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: $29' };
      }
      
      console.log('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã');
      return { eligible: true };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∞:', error);
      return { eligible: false, reason: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∞' };
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤
  LC.loadWithdrawalsList = async function() {
    try {
      const sb = window.sb || window.supabase;
      if (!sb) {
        console.error('‚ùå Supabase not available');
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: { user } } = await sb.auth.getUser();
      if (!user) return;
      
      const tbody = document.getElementById('wd-table-body');
      if (!tbody) return;
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data, error } = await sb
        .from('withdrawals')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false })
        .limit(50);
      
      if (error) throw error;
      
      tbody.innerHTML = '';
      
      if (!data || data.length === 0) {
        tbody.innerHTML = '<tr><td colspan="6" class="text-center">–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫</td></tr>';
        return;
      }
      
      // –†–µ–Ω–¥–µ—Ä–∏–º —Ç–∞–±–ª–∏—Ü—É
      data.forEach(withdrawal => {
        const tr = document.createElement('tr');
        const amount = (withdrawal.amount_cents / 100).toFixed(2);
        const date = new Date(withdrawal.created_at).toLocaleString();
        const fee = withdrawal.fee_cents ? (withdrawal.fee_cents / 100).toFixed(2) : '0.00';
        const total = ((withdrawal.amount_cents + (withdrawal.fee_cents || 0)) / 100).toFixed(2);
        
        // –°—Ç–∞—Ç—É—Å—ã
        let statusBadge = '';
        switch (withdrawal.status) {
          case 'paid':
            statusBadge = '<span class="pill paid">–í—ã–ø–ª–∞—á–µ–Ω–æ</span>';
            break;
          case 'rejected':
            statusBadge = '<span class="pill rejected">–û—Ç–∫–ª–æ–Ω–µ–Ω–æ</span>';
            break;
          case 'cancelled':
            statusBadge = '<span class="pill rejected">–û—Ç–º–µ–Ω–µ–Ω–æ</span>';
            break;
          default:
            statusBadge = '<span class="pill pending">–û–∂–∏–¥–∞–Ω–∏–µ</span>';
        }
        
        // –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ pending –∑–∞—è–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —á–∞—Å–æ–≤
        const canCancel = withdrawal.status === 'pending' && 
          (Date.now() - new Date(withdrawal.created_at).getTime()) < 5 * 3600 * 1000;
        
        tr.innerHTML = `
          <td>${date}</td>
          <td class="right">${total} $</td>
          <td>${withdrawal.network || 'TRC20'}</td>
          <td>${statusBadge}</td>
          <td>${withdrawal.txid ? `<code title="${withdrawal.txid}">${withdrawal.txid.substring(0, 8)}...</code>` : '‚Äî'}</td>
          <td>
            ${canCancel ? 
              `<button class="btn bad" data-cancel="${withdrawal.id}">–û—Ç–º–µ–Ω–∏—Ç—å</button>` : 
              '<span class="small muted">‚Äî</span>'
            }
          </td>
        `;
        tbody.appendChild(tr);
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ç–º–µ–Ω—ã
      tbody.querySelectorAll('[data-cancel]').forEach(btn => {
        btn.addEventListener('click', async (e) => {
          const withdrawalId = e.target.getAttribute('data-cancel');
          await LC.cancelWithdrawal(withdrawalId);
        });
      });
      
    } catch (error) {
      console.error('‚ùå Load withdrawals error:', error);
      const tbody = document.getElementById('wd-table-body');
      if (tbody) {
        tbody.innerHTML = '<tr><td colspan="6" class="text-center">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</td></tr>';
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –≤—ã–≤–æ–¥–∞
  LC.cancelWithdrawal = async function(withdrawalId) {
    if (!confirm('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥? –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å.')) {
      return;
    }
    
    try {
      const sb = window.sb || window.supabase;
      if (!sb) {
        alert(window.LC_I18N ? window.LC_I18N.t('notification_network_error') : '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        return;
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º RPC —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–º–µ–Ω—ã
      const { data, error } = await sb.rpc('user_cancel_withdrawal', {
        p_id: parseInt(withdrawalId)
      });
      
      if (error) {
        console.error('‚ùå Cancel withdrawal RPC error:', error);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É: ' + error.message);
      }
      
      if (!data.success) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏');
      }
      
      alert('‚úÖ ' + (data.message || (window.LC_I18N ? window.LC_I18N.t('notification_success') + ' –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞' : '–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      await LC.refreshBalance();
      
    } catch (error) {
      console.error('‚ùå Cancel withdrawal error:', error);
      alert((window.LC_I18N ? window.LC_I18N.t('notification_failed') : '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏') + ': ' + error.message);
    }
  };

  // Real-time –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥—ã
  LC.subscribeToWithdrawals = async function() {
    try {
      const sb = window.sb || window.supabase;
      if (!sb) return;
      
      const { data: { user } } = await sb.auth.getUser();
      if (!user) return;
      
      console.log('üîî –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–≤–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id);
      
      const channel = sb.channel('withdrawals-' + user.id)
        .on('postgres_changes', 
          { 
            event: '*', 
            schema: 'public', 
            table: 'withdrawals',
            filter: `user_id=eq.${user.id}`
          }, 
          (payload) => {
            console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞:', payload);
            LC.loadWithdrawalsList();
            LC.refreshBalance();
          }
        )
        .subscribe((status) => {
          console.log('üì° –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥—ã:', status);
        });
      
      return channel;
    } catch (error) {
      console.error('‚ùå Subscribe to withdrawals error:', error);
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–≤–æ–¥–∞
  LC.initWithdrawPage = async function() {
    try {
      const sb = window.sb || window.supabase;
      if (!sb) {
        console.error('‚ùå Supabase not available');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      const { data: { user } } = await sb.auth.getUser();
      if (!user) {
        window.location.href = 'login_single.html';
        return;
      }
      
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      await LC.refreshBalance();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–æ–≤
      await LC.loadWithdrawalsList();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º real-time –ø–æ–¥–ø–∏—Å–∫—É
      await LC.subscribeToWithdrawals();
      
      console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–≤–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      
    } catch (error) {
      console.error('‚ùå Withdraw page init error:', error);
    }
  };

  // ===== –°–ò–°–¢–ï–ú–ê –î–ï–ü–û–ó–ò–¢–û–í ================================================

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–µ–ø–æ–∑–∏—Ç–∞
  LC.initDepositPage = async function() {
    try {
      const user = await getUser(); 
      if (!user) { 
        location.href = '/login_single.html'; 
        return; 
      }
      await LC.refreshBalance();
      
      const form = document.getElementById('depositForm');
      if (form && !form.dataset.lcInit) {
        form.dataset.lcInit = '1';
        form.addEventListener('submit', async (e) => {
          e.preventDefault();
          const amount = parseFloat(document.getElementById('amount')?.value || '0');
          const network = document.getElementById('network')?.value || 'TRC20';
          await LC.createDeposit(Math.round(amount * 100), network, 'USDT');
        });
      }
    } catch(e) { 
      console.error('[LC] initDepositPage', e); 
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞
  LC.createDeposit = async function(amountCents, network='TRC20', currency='USDT') {
    const user = await getUser(); 
    if (!user) { 
      alert(window.LC_I18N ? window.LC_I18N.t('notification_login_required') : '‚ùå –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç'); 
      return; 
    }
    
    const { data, error } = await sb.rpc('create_deposit', {
      p_amount_cents: Math.max(0, Math.floor(amountCents || 0)),
      p_network: String(network || 'TRC20'),
      p_currency: String(currency || 'USDT')
    });
    
    if (error) { 
      console.error(error); 
      alert(window.LC_I18N ? window.LC_I18N.t('notification_deposit_error') : '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞'); 
      return; 
    }
    
    const row = Array.isArray(data) ? data[0] : data;
    if (!row?.ok) { 
      alert(row?.message || (window.LC_I18N ? window.LC_I18N.t('notification_deposit_error') : '‚ùå –î–µ–ø–æ–∑–∏—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω')); 
      return; 
    }
    
    alert(window.LC_I18N ? window.LC_I18N.t('notification_deposit_success') : '‚úÖ –î–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω');
    return row;
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º TXID
  LC.createDepositWithTx = async function(amountCents, network = 'TRC20', currency = 'USDT', txid = '') {
    try {
      const user = await getUser();
      if (!user) {
        alert(window.LC_I18N ? window.LC_I18N.t('notification_login_required') : '‚ùå –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç');
        return null;
      }

      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞:', {
        userId: user.id,
        amountCents,
        network,
        currency,
        txid
      });

      // –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç –Ω–∞–ø—Ä—è–º—É—é
      const { data, error } = await sb
        .from('deposits')
        .insert({
          user_id: user.id,
          amount_cents: amountCents,
          network: network,
          currency: currency,
          txid: txid || null,
          status: 'pending',
          created_at: new Date().toISOString()
        })
        .select()
        .single();

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
        alert((window.LC_I18N ? window.LC_I18N.t('notification_deposit_error') : '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç') + ': ' + error.message);
        return null;
      }

      console.log('‚úÖ –î–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω:', data);
      return { ok: true, id: data.id, message: window.LC_I18N ? window.LC_I18N.t('notification_deposit_success') : '‚úÖ –î–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω' };
        
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
      alert((window.LC_I18N ? window.LC_I18N.t('notification_deposit_error') : '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞') + ': ' + error.message);
      return null;
    }
  };

  // –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ TXID –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –¥–µ–ø–æ–∑–∏—Ç—É
  LC.attachTxToDeposit = async function(depositId, txid) {
    try {
      const user = await getUser();
      if (!user) {
        alert(window.LC_I18N ? window.LC_I18N.t('notification_login_required') : '‚ùå –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç');
        return null;
      }

      const { data, error } = await sb
        .from('deposits')
        .update({ 
          txid: txid,
          updated_at: new Date().toISOString()
        })
        .eq('id', depositId)
        .eq('user_id', user.id)
        .select()
        .single();

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è TXID:', error);
        alert((window.LC_I18N ? window.LC_I18N.t('notification_failed') : '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å TXID') + ': ' + error.message);
        return null;
      }

      console.log('‚úÖ TXID –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω:', data);
      return data;
        
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è TXID:', error);
      alert((window.LC_I18N ? window.LC_I18N.t('notification_failed') : '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ TXID') + ': ' + error.message);
      return null;
    }
  };

  // ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –î–ê–®–ë–û–†–î–ê ============================================
  LC.initDashboard = async function() {
    try {
      const user = await getUser(); 
      if (!user) { 
        location.href = '/login_single.html'; 
        return; 
      }
      
      console.log('üîÑ Initializing dashboard for user:', user.id);
      
      // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
      await LC.ensureProfile();
      await new Promise(resolve => setTimeout(resolve, 500));
      
      await LC.applyReferral();
      await new Promise(resolve => setTimeout(resolve, 500));
      
      await LC.mountReferral();
      await new Promise(resolve => setTimeout(resolve, 500));
      
      await LC.refreshBalance();
      await new Promise(resolve => setTimeout(resolve, 500));
      
      await LC.refreshLevelInfo();
      await new Promise(resolve => setTimeout(resolve, 500));
      
      await LC.refreshDashboardCards();
      await new Promise(resolve => setTimeout(resolve, 500));
      
      await LC.loadReferralEarnings();
      await new Promise(resolve => setTimeout(resolve, 500));
      
      LC.initVideoWatch();
      
      console.log('‚úÖ Dashboard successfully initialized');
      
      // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      setInterval(async () => {
        await LC.refreshBalance();
        await LC.refreshLevelInfo();
        await LC.loadReferralEarnings();
      }, 30000);
      
    } catch(e) { 
      console.error('[LC] initDashboard error:', e); 
    }
  };

  // ===== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ======================================
  const init = function() {
    const path = location.pathname;
    if (path.includes('dashboard')) {
      LC.initDashboard();
    } else if (path.includes('withdraw')) {
      LC.initWithdrawPage();
    } else if (path.includes('deposit')) {
      LC.initDepositPage();
    } else if (path.includes('login') || path.includes('register')) {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      setTimeout(() => {
        LC.applyReferral();
      }, 1000);
    }
  };

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    setTimeout(init, 100);
  }

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç
  window.LC = LC;
})();
